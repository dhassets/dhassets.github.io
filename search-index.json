[{"content":"Welcome to the DH Save System documentation. This guide provides all the information needed to integrate and utilize the DH Save System within your Unity projects. Designed to offer a robust and secure method for saving and loading game data, this system supports a wide variety of data types and ensures the security of your data through encryption.\n1. Overview The DH Save System distinguishes between global data (e.g., game settings) and slot-specific data (e.g., player progress) to provide flexible and secure data management. With built-in encryption and easy-to-use interfaces, it\u0026rsquo;s an essential tool for Unity developers looking to implement reliable save and load functionality.\nOverview\r2. Configuration SaveSystemSettings: Accessible via Project Settings, this component allows for the configuration of encryption keys, auto-saving preferences, and key history management.\nSave Data Window: A Unity Editor tool for viewing saved data directly, enhancing the development and debugging process.\nConfiguration\r3. SaveSystemManager A runtime component that loads saved data upon game start. It supports custom converters for non-serializable classes, ensuring that all game data can be efficiently saved and loaded.\nSaveSystemManager\r4. Basic Operations Saving Data Illustrates how to save both global and slot-specific data, with examples for various data types, including dictionaries and transforms.\nSaving Data\rLoading Data Guides on retrieving saved data, with an emphasis on type safety and handling optional data.\nLoading Data\r5. Encryption Details the encryption mechanism used to secure saved data, including setting up encryption keys and managing key history for data recovery.\nEncryption\r6. SaveDataSlot Class The SaveDataSlot class manages individual game save slots within the DH Save System, encapsulating slot details like name, save timestamp, progress, and custom data. It simplifies save slot manipulation and querying, offering a robust framework for game save management.\nSaveDataSlot Class\rProperties SlotName, LastSave, Progress, IndexSlot, SavePath, OtherData: Essential slot details including custom data storage. Methods SetSlotName, SetProgress, SetOtherData\u0026lt;T\u0026gt;, GetOtherData\u0026lt;T\u0026gt;: Update slot information and manage custom data, supporting flexible data types for comprehensive save management. 7. SaveSystem Class The SaveSystem class is the core of the DH Save System, providing essential functionalities for saving and loading data. It facilitates access to both global data and individual save slots, ensuring secure and efficient data management across your game.\nProperties GetCurrentSaveSlot, GetSaveDataSlots, GetGlobalData, GetSlotData: Accessors for retrieving current slots, all slots, and their respective data. Properties\rMethods Comprehensive coverage of all methods, from Save and Load to more specialized functions like LoadTransform and Serialize. Methods\r8. Exceptions Explains common exceptions (e.g., KeyAlreadyExistsException, SaveSlotNotLoadedException) and provides strategies for resolution, ensuring robust error handling.\nExceptions\r9. Working with Serializable Types SerializableDictionary and SerializableTransform Demonstrates converting complex data types into serializable formats for saving, and vice versa for loading, complete with examples.\nMethods\rContact \u0026amp; Support For support, bug reports, or contributions, please contact via email: support@hurtaweb.cz. We welcome your feedback and contributions to the project.\n","date":"0001-01-01","id":0,"permalink":"/docs/dh-save-system/quick-start/introduction/","summary":"\u003cp\u003eWelcome to the DH Save System documentation. This guide provides all the information needed to integrate and utilize the DH Save System within your Unity projects. Designed to offer a robust and secure method for saving and loading game data, this system supports a wide variety of data types and ensures the security of your data through encryption.\u003c/p\u003e","tags":[],"title":"Introduction"},{"content":"Welcome to the DH UI Navigation System documentation. This guide provides all the information needed to integrate and utilize the DH UI Navigation System within your Unity projects. Designed to enhance navigation capabilities, this system offers advanced features for managing UI navigation, making it an essential tool for developers looking to create intuitive and efficient user interfaces.\nQuick Start Guide Contact \u0026amp; Support For support, bug reports, or contributions, please contact via email: support@hurtaweb.cz. We welcome your feedback and contributions to the project.\n","date":"0001-01-01","id":1,"permalink":"/docs/dh-ui-navigation-system/quick-start/introduction/","summary":"\u003cp\u003eWelcome to the DH UI Navigation System documentation. This guide provides all the information needed to integrate and utilize the DH UI Navigation System within your Unity projects. Designed to enhance navigation capabilities, this system offers advanced features for managing UI navigation, making it an essential tool for developers looking to create intuitive and efficient user interfaces.\u003c/p\u003e","tags":[],"title":"Introduction"},{"content":"","date":"0001-01-01","id":2,"permalink":"/docs/dh-save-system/quick-start/","summary":"","tags":[],"title":"Quick Start"},{"content":"","date":"0001-01-01","id":3,"permalink":"/docs/dh-ui-navigation-system/quick-start/","summary":"","tags":[],"title":"Quick Start"},{"content":"The DH Save System allows for the secure saving and loading of game data within Unity, distinguishing between global data and slot-specific data. Global data typically includes game settings like resolution, fullscreen preference, volume, etc., while slot data contains gameplay-related information such as player scores, lives, and positions. Encryption is utilized to secure data, with encryption keys managed in SaveSystemSettings.\n","date":"0001-01-01","id":4,"permalink":"/docs/dh-save-system/quick-start/overview/","summary":"\u003cp\u003eThe DH Save System allows for the secure saving and loading of game data within Unity, distinguishing between global data and slot-specific data. Global data typically includes game settings like resolution, fullscreen preference, volume, etc., while slot data contains gameplay-related information such as player scores, lives, and positions. Encryption is utilized to secure data, with encryption keys managed in \u003ccode\u003eSaveSystemSettings\u003c/code\u003e.\u003c/p\u003e","tags":[],"title":"Overview"},{"content":"The DH UI Navigation System is an advanced component designed to facilitate navigation within Unity user interfaces. This system builds upon standard navigation features, providing enhanced capabilities and customization options. The main component of this system is the Navigation component, which can be attached to any UI element to control its navigation behavior.\n","date":"0001-01-01","id":5,"permalink":"/docs/dh-ui-navigation-system/quick-start/overview/","summary":"\u003cp\u003eThe DH UI Navigation System is an advanced component designed to facilitate navigation within Unity user interfaces. This system builds upon standard navigation features, providing enhanced capabilities and customization options. The main component of this system is the \u003ccode\u003eNavigation\u003c/code\u003e component, which can be attached to any UI element to control its navigation behavior.\u003c/p\u003e","tags":[],"title":"Overview"},{"content":"SaveSystemSettings Located under Project Settings/Save System Settings, this component is crucial for setting up your encryption key and managing save data preferences.\nKey Features:\nGenerate Encrypt Key: Click to generate a new encryption key, which is immediately set as the current key.\nKey History: Maintains a history of used keys (default is 5) to recover from accidental changes.\nAuto Save Global Data: Automatically saves global data upon any addition or modification.\nAuto Save Slot Data: Enables automatic saving for the currently loaded slot, with a customizable delay (Auto Save Slot Data Delay Time in minutes).\nSave Data Window Accessible via Tools/Save Data, this utility provides a visual interface for managing save data directly in the Unity Editor.\nCapabilities:\nSaveSystemManager Integration: Automatically creates a SaveSystemManager in the current scene if not present, allowing for runtime data management.\nData Viewing and Editing: Separate sections for GLOBAL and SLOT data, including a search function by ID.\nSlot Data Management: Offers the ability to browse through slots or view the current slot\u0026rsquo;s data in the editor.\n","date":"0001-01-01","id":6,"permalink":"/docs/dh-save-system/configuration/","summary":"\u003ch3 id=\"savesystemsettings\"\u003e\u003cstrong\u003eSaveSystemSettings\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eLocated under \u003cstrong\u003eProject Settings/Save System Settings\u003c/strong\u003e, this component is crucial for setting up your encryption key and managing save data preferences.\u003c/p\u003e","tags":[],"title":"Configuration"},{"content":"A script that facilitates the loading of saved data when the game starts. It also allows for the addition of custom converters for non-serializable classes through the jsonConverters list.\nCustom Converters Add your custom converter that inherits from JsonConverter to the jsonConverters list for handling specific serialization needs.\n","date":"0001-01-01","id":7,"permalink":"/docs/dh-save-system/savesystemmanager/","summary":"\u003cp\u003eA script that facilitates the loading of saved data when the game starts. It also allows for the addition of custom converters for non-serializable classes through the \u003ccode\u003ejsonConverters\u003c/code\u003e list.\u003c/p\u003e","tags":[],"title":"SaveSystemManager"},{"content":"Saving Data Global Data Example:\n// Save resolution settings as global data SaveSystem.Save(\u0026#34;resolution\u0026#34;, new Vector2(1920, 1080), isGlobal: true);\rSlot Data Example:\n// Save player score in the current slot SaveSystem.Save(\u0026#34;playerScore\u0026#34;, 5000, isGlobal: false);\rLoading Data Global Data Example:\n// Load resolution settings Vector2 resolution = SaveSystem.Load\u0026lt;Vector2\u0026gt;(\u0026#34;resolution\u0026#34;, isGlobal: true);\rSlot Data Example:\n// Load player score from the current slot int score = SaveSystem.Load\u0026lt;int\u0026gt;(\u0026#34;playerScore\u0026#34;, isGlobal: false);\r","date":"0001-01-01","id":8,"permalink":"/docs/dh-save-system/basic-operations/","summary":"\u003ch3 id=\"saving-data\"\u003e\u003cstrong\u003eSaving Data\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eGlobal Data Example:\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Save resolution settings as global data\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eSaveSystem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSave\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;resolution\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"k\"\u003enew\u003c/span\u003e \u003cspan class=\"n\"\u003eVector2\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"m\"\u003e1920\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e1080\u003c/span\u003e\u003cspan class=\"p\"\u003e),\u003c/span\u003e \u003cspan class=\"n\"\u003eisGlobal\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003etrue\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003cp\u003eSlot Data Example:\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"c1\"\u003e// Save player score in the current slot\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eSaveSystem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSave\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;playerScore\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"m\"\u003e5000\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eisGlobal\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"kc\"\u003efalse\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch3 id=\"loading-data\"\u003e\u003cstrong\u003eLoading Data\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eGlobal Data Example:\u003c/p\u003e","tags":[],"title":"Basic Operations"},{"content":"Ensure the encryption key is correctly set in SaveSystemSettings for secure data saving and loading. Use the Generate Encrypt Key button for easy key management and apply auto-saving settings as needed for both global and slot data.\n","date":"0001-01-01","id":9,"permalink":"/docs/dh-save-system/encryption/","summary":"\u003cp\u003eEnsure the encryption key is correctly set in \u003ccode\u003eSaveSystemSettings\u003c/code\u003e for secure data saving and loading. Use the Generate Encrypt Key button for easy key management and apply auto-saving settings as needed for both global and slot data.\u003c/p\u003e","tags":[],"title":"Encryption"},{"content":"The SaveDataSlot class represents an individual save slot in your game, encapsulating details such as the slot\u0026rsquo;s name, save progress, and additional custom data. It is designed to work seamlessly with the DH Save System, allowing for the creation, modification, and management of save slots without directly manipulating save files.\nProperties SlotName: The name of the save slot.\nLastSave: Timestamp of the last save action.\nProgress: A float value indicating the player\u0026rsquo;s progress.\nIndexSlot: The index of the slot.\nSavePath: The file path where the slot data is saved.\nOtherData: Custom data that developers can store related to the save slot.\nMethods SetSlotName Updates the name of the save slot.\nExample Usage:\nsaveDataSlot.SetSlotName(\u0026#34;NewSlotName\u0026#34;);\rSetProgress Updates the progress value of the save slot.\nExample Usage:\nsaveDataSlot.SetProgress(0.5f); // 50% progress\rSetOtherData\u0026lt;T\u0026gt; Sets custom data of any type to the save slot and optionally saves this data immediately.\nParameters newOtherData: The custom data to set.\nsaveImmediately: If true, the data is saved immediately to disk.\nExample Usage\n// Assuming CustomData is a custom class you want to save as other data CustomData customData = new CustomData { /* initialization */ }; saveDataSlot.SetOtherData(customData, saveImmediately: true);\rThis method serializes the newOtherData into JSON, stores it in the save slot, and optionally saves the global data immediately if saveImmediately is set to true.\nGetOtherData\u0026lt;T\u0026gt; Retrieves the custom \u0026ldquo;other data\u0026rdquo; stored in the save slot, if any, and deserializes it back into the original data type.\nReturns The retrieved data of type T, or the default value for type T if not found. Example Usage\nCustomData customData = saveDataSlot.GetOtherData\u0026lt;CustomData\u0026gt;();\rThis method deserializes the JSON stored in the otherData field of the save slot back into the specified type T, allowing for easy access to custom data stored in each save slot.\nWorking with SaveDataSlot Save slots are managed through the global data structure and are accessible via the Save Data Window under the name \u0026ldquo;SLOTS\u0026rdquo;. It\u0026rsquo;s crucial not to use \u0026ldquo;SLOTS\u0026rdquo; as a key for your own save data to avoid conflicts.\nCreating and Removing Save Slots Save slots are created and removed through the SaveSystem class, using methods such as CreateNewSaveSlot and RemoveSaveSlot. The SavePath is automatically generated, and the LastSave timestamp is updated upon calling SaveSystem.SaveData(), which saves the slot and its current state.\nExample: Creating a New Save Slot\nSaveSystem.CreateNewSaveSlot(\u0026#34;Slot1\u0026#34;, indexSlot: 1);\rExample: Removing a Save Slot\nSaveSystem.RemoveSaveSlot(\u0026#34;Slot1\u0026#34;, indexSlot: 1);\rNote on Data Access Access to SaveDataSlot properties is straightforward, utilizing public properties without the need for serialization/deserialization methods. This makes retrieving data like progress, slot name, and last save time efficient and direct, streamlining the process of working with save slots in your game.\n","date":"0001-01-01","id":10,"permalink":"/docs/dh-save-system/savedataslot-class/","summary":"\u003cp\u003eThe \u003ccode\u003eSaveDataSlot\u003c/code\u003e class represents an individual save slot in your game, encapsulating details such as the slot\u0026rsquo;s name, save progress, and additional custom data. It is designed to work seamlessly with the DH Save System, allowing for the creation, modification, and management of save slots without directly manipulating save files.\u003c/p\u003e","tags":[],"title":"SaveDataSlot Class"},{"content":"The SaveSystem class provides static functions for saving and loading game data, managing save slots, and handling global and slot-specific data. It also includes methods for data encryption, checking for unsaved changes, and clearing data.\nProperties\nMethods\n","date":"0001-01-01","id":11,"permalink":"/docs/dh-save-system/save-system-class/","summary":"\u003cp\u003eThe \u003ccode\u003eSaveSystem\u003c/code\u003e class provides static functions for saving and loading game data, managing save slots, and handling global and slot-specific data. It also includes methods for data encryption, checking for unsaved changes, and clearing data.\u003c/p\u003e","tags":[],"title":"SaveSystem Class"},{"content":"When working with the DH Save System, you may encounter several exceptions. These are typically easy to resolve and often involve either attempting to save data with an existing ID or trying to save to a slot that hasn\u0026rsquo;t been loaded. Here\u0026rsquo;s how you can address the issues related to these exceptions:\nMissingMethodException This exception occurs when a class that is being saved does not have a default constructor. The DH Save System requires a parameterless constructor to instantiate objects during deserialization.\nSolution Ensure that any class you intend to serialize with the DH Save System includes a default, parameterless constructor. If your class has constructors that take parameters, you must still provide a default constructor.\nExample public class PlayerData { public int score; public string name; // Default constructor public PlayerData() { } // Constructor with parameters public PlayerData(string name, int score) { this.name = name; this.score = score; } } try { PlayerData playerData = new PlayerData(\u0026#34;John Doe\u0026#34;, 1000); SaveSystem.Save(\u0026#34;playerData\u0026#34;, playerData, isGlobal: false); } catch (MissingMethodException) { // Ensure PlayerData class includes a default constructor Console.WriteLine(\u0026#34;Ensure the PlayerData class has a default constructor.\u0026#34;); }\rAdding a default constructor allows the serialization and deserialization processes to function correctly, avoiding the MissingMethodException and ensuring smooth operation of the DH Save System.\nKeyAlreadyExistsException Occurs when attempting to save data with an ID that already exists within the specified scope (global or slot-specific).\nSolution Change the ID you\u0026rsquo;re using for saving. Ensure it\u0026rsquo;s unique to avoid conflicts.\nExample\ntry { SaveSystem.Save(\u0026#34;playerScore\u0026#34;, 5000, isGlobal: false); } catch (KeyAlreadyExistsException) { // Change the ID and try again SaveSystem.Save(\u0026#34;playerScore1\u0026#34;, 5000, isGlobal: false); }\rSaveSlotNotLoadedException Thrown when attempting to save to a slot that hasn\u0026rsquo;t been loaded. This can occur if you try to save slot-specific data before a slot is active.\nSolution Before saving data to a slot, ensure that a slot is loaded. If you need to save data but no slot is loaded, either save it as global data or wait until a slot has been loaded.\nExample\ntry { SaveSystem.Save(\u0026#34;playerLocation\u0026#34;, new Vector3(0, 0, 0), isGlobal: false); } catch (SaveSlotNotLoadedException) { // Load a slot or save as global data instead SaveSystem.LoadSaveSlot(\u0026#34;SlotName\u0026#34;); SaveSystem.Save(\u0026#34;playerLocation\u0026#34;, new Vector3(0, 0, 0), isGlobal: false); }\rInvalidFieldTypeException, InvalidPropertyTypeException These exceptions occur when saving custom classes that use unsupported types, such as Dictionary or Transform, without converting them to a serializable form.\nSolution Convert unsupported types to their serializable counterparts provided by the save system, such as changing Transform to SerializableTransform and Dictionary\u0026lt;TKey, TValue\u0026gt; to SerializableDictionary\u0026lt;TKey, TValue\u0026gt;.\nExample\ntry { var playerData = new CustomPlayerData { playerTransform = new SerializableTransform(player.transform), inventoryItems = new SerializableDictionary\u0026lt;string, int\u0026gt;(inventoryItems) }; SaveSystem.Save(\u0026#34;playerData\u0026#34;, playerData, isGlobal: false); } catch (InvalidFieldTypeException) { // Ensure all fields are using serializable types } catch (InvalidPropertyTypeException) { // Ensure all properties are using serializable types }\r","date":"0001-01-01","id":12,"permalink":"/docs/dh-save-system/exceptions/","summary":"\u003cp\u003eWhen working with the \u003cstrong\u003eDH Save System\u003c/strong\u003e, you may encounter several exceptions. These are typically easy to resolve and often involve either attempting to save data with an existing ID or trying to save to a slot that hasn\u0026rsquo;t been loaded. Here\u0026rsquo;s how you can address the issues related to these exceptions:\u003c/p\u003e","tags":[],"title":"Exceptions"},{"content":"SerializableDictionary To save a Dictionary type that is in custom class, it must be stored using SerializableDictionary. Upon loading a SerializableDictionary, you can easily convert it back to a standard Dictionary type using the .ToDictionary() method. When you saving just simple Dictionary, you can use standard Dictionary type.\nUsage Example\nSaving a Dictionary\n// Assuming you have a Dictionary you wish to save Dictionary\u0026lt;string, int\u0026gt; playerScores = new Dictionary\u0026lt;string, int\u0026gt; { { \u0026#34;player1\u0026#34;, 100 }, { \u0026#34;player2\u0026#34;, 200 } }; // Convert to SerializableDictionary and save SerializableDictionary\u0026lt;string, int\u0026gt; serializableScores = new SerializableDictionary\u0026lt;string, int\u0026gt;(playerScores); SaveSystem.Save(\u0026#34;playerScores\u0026#34;, serializableScores, isGlobal: true);\rLoading a Dictionary\n// Load the SerializableDictionary SerializableDictionary\u0026lt;string, int\u0026gt; loadedScores = SaveSystem.Load\u0026lt;SerializableDictionary\u0026lt;string, int\u0026gt;\u0026gt;(\u0026#34;playerScores\u0026#34;, isGlobal: true); // Convert back to Dictionary Dictionary\u0026lt;string, int\u0026gt; playerScores = loadedScores.ToDictionary();\rSerializableTransform For saving Transform properties, use SerializableTransform. Unlike directly setting a transform, SerializableTransform requires you to apply the stored values to a target transform using the .ApplyToTransform(Transform) method.\nUsage Example\nSaving a Transform\n// Create a SerializableTransform from a GameObject\u0026#39;s transform SerializableTransform serializableTransform = new SerializableTransform(playerGameObject.transform); // Save the SerializableTransform SaveSystem.Save(\u0026#34;playerTransform\u0026#34;, serializableTransform, isGlobal: false);\rLoading and Applying a Transform\n// Load the SerializableTransform SerializableTransform loadedTransform = SaveSystem.Load\u0026lt;SerializableTransform\u0026gt;(\u0026#34;playerTransform\u0026#34;, isGlobal: false); // Apply the loaded transform values to a GameObject\u0026#39;s transform loadedTransform.ApplyToTransform(playerGameObject.transform);\rSerializableFloat2 For saving 2D vector types (such as Float2 from a mathematics library), use SerializableFloat2. This type ensures that 2D vector data can be serialized and deserialized properly.\nWhen SerializableFloat2 is used within a custom class, it must be utilized to ensure serialization compatibility. It includes a method, .ToFloat2(), to convert back to the original vector type.\nUsage Example\nSaving a Float2\n// Assuming you have a Float2 representing player position Float2 playerPosition = new Float2(1.5f, 2.5f); // Convert to SerializableFloat2 and save SerializableFloat2 serializablePosition = new SerializableFloat2(playerPosition); SaveSystem.Save(\u0026#34;playerPosition\u0026#34;, serializablePosition, isGlobal: true);\rLoading a Float2\n// Load the SerializableFloat2 SerializableFloat2 loadedPosition = SaveSystem.Load\u0026lt;SerializableFloat2\u0026gt;(\u0026#34;playerPosition\u0026#34;, isGlobal: true); // Convert back to Float2 Float2 playerPosition = loadedPosition.ToFloat2();\rSerializableFloat3 For saving 3D vector types (such as Float3 from a mathematics library), use SerializableFloat3. This type is necessary for the serialization and deserialization of 3D vector data.\nSimilar to SerializableFloat2, when SerializableFloat3 is part of a custom class, it must be used to maintain serialization compatibility. It provides a .ToFloat3() method for converting the serialized data back into its original vector form.\nUsage Example\nSaving Float3\n// Assuming you have a Float3 representing player velocity Float3 playerVelocity = new Float3(0.5f, 0.0f, 1.0f); // Convert to SerializableFloat3 and save SerializableFloat3 serializableVelocity = new SerializableFloat3(playerVelocity); SaveSystem.Save(\u0026#34;playerVelocity\u0026#34;, serializableVelocity, isGlobal: false);\rLoading Float3\n// Load the SerializableFloat3 SerializableFloat3 loadedVelocity = SaveSystem.Load\u0026lt;SerializableFloat3\u0026gt;(\u0026#34;playerVelocity\u0026#34;, isGlobal: false); // Convert back to Float3 Float3 playerVelocity = loadedVelocity.ToFloat3();\r","date":"0001-01-01","id":13,"permalink":"/docs/dh-save-system/working-with-serializable-types/","summary":"\u003ch2 id=\"serializabledictionary\"\u003e\u003ccode\u003eSerializableDictionary\u003c/code\u003e\u003c/h2\u003e\n\u003cp\u003eTo save a \u003ccode\u003eDictionary\u003c/code\u003e type \u003cstrong\u003ethat is\u003c/strong\u003e \u003cstrong\u003ein custom class\u003c/strong\u003e, it must be stored using \u003ccode\u003eSerializableDictionary\u003c/code\u003e. Upon loading a \u003ccode\u003eSerializableDictionary\u003c/code\u003e, you can easily convert it back to a standard \u003ccode\u003eDictionary\u003c/code\u003e type using the \u003ccode\u003e.ToDictionary()\u003c/code\u003e method.\nWhen you saving just \u003cstrong\u003esimple\u003c/strong\u003e \u003ccode\u003eDictionary\u003c/code\u003e, you can use standard \u003ccode\u003eDictionary\u003c/code\u003e type.\u003c/p\u003e","tags":[],"title":"Working with Serializable Types"},{"content":"","date":"0001-01-01","id":14,"permalink":"/categories/","summary":"","tags":[],"title":"Categories"},{"content":"","date":"0001-01-01","id":15,"permalink":"/contributors/","summary":"","tags":[],"title":"Contributors"},{"content":"","date":"0001-01-01","id":16,"permalink":"/docs/dh-save-system/","summary":"","tags":[],"title":"DH Save System"},{"content":"","date":"0001-01-01","id":17,"permalink":"/docs/dh-shaders/","summary":"","tags":[],"title":"DH Shaders"},{"content":"","date":"0001-01-01","id":18,"permalink":"/docs/dh-ui-navigation-system/","summary":"","tags":[],"title":"DH UI Navigation System"},{"content":"Choose an asset:\nDH Save System\rDH UI Navigation System\rOther\rDH Shaders\r","date":"0001-01-01","id":19,"permalink":"/","summary":"\u003cp\u003eChoose an asset:\u003c/p\u003e\n\u003cdiv class=\"grid\"\u003e\r\n\u003ca href=\"/docs/dh-save-system/\" class=\"btn btn-primary btn-cta rounded-pill btn-lg my-3\"\u003eDH Save System\u003c/a\u003e\r\n\u003ca href=\"/docs/dh-ui-navigation-system/\" class=\"btn btn-primary btn-cta rounded-pill btn-lg my-3\"\u003eDH UI Navigation System\u003c/a\u003e\r\n\u003ca href=\"/docs/other/\" class=\"btn btn-primary btn-cta rounded-pill btn-lg my-3\"\u003eOther\u003c/a\u003e\r\n\u003ca href=\"/docs/shaders/\" class=\"btn btn-primary btn-cta rounded-pill btn-lg my-3\"\u003eDH Shaders\u003c/a\u003e\r\n\u003c/div\u003e","tags":[],"title":"DH Unity Assets Documentation"},{"content":"","date":"0001-01-01","id":20,"permalink":"/docs/","summary":"","tags":[],"title":"Dosc"},{"content":"Customize navigation by ignoring certain sides and manually setting navigation targets for these sides.\nIgnored Sides Options: Left, Right, Up, Down. ","date":"0001-01-01","id":21,"permalink":"/docs/dh-ui-navigation-system/ignored-sides/","summary":"\u003cp\u003eCustomize navigation by ignoring certain sides and manually setting navigation targets for these sides.\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003cstrong\u003eIgnored Sides Options\u003c/strong\u003e: Left, Right, Up, Down.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\r\n\u003cimg src=\"/dh-ui-navigation-system/images/image1.png\" alt=\"\"   style=\"margin: auto; display:block;\" /\u003e\r\n\u003c/p\u003e","tags":[],"title":"Ignored Sides"},{"content":"This project includes the following software components, each under its own license:\nDH Save System Limited Use License Agreement\nCopyright (c) 2024 Dominik Hurta\nThis software is provided to you (\u0026ldquo;Licensee\u0026rdquo;) by Dominik Hurta (\u0026ldquo;Licensor\u0026rdquo;) under the following terms and conditions. By using this software, you agree to be bound by the terms of this license.\n1. Grant of License\nLicensor grants to Licensee a non-exclusive, non-transferable license to use the software solely for personal or internal business purposes. This license is granted only to individuals or entities that have purchased the software from Dominik Hurta or an authorized distributor.\n2. Restrictions\nLicensee may not:\na. Modify, adapt, translate, or create derivative works based upon the software;\nb. Decompile, reverse engineer, disassemble, or otherwise attempt to derive source code from the software;\nc. Redistribute, sell, lease, rent, or sublicense the software to any third party;\nd. Remove any proprietary notices or labels on the software.\n3. Ownership\nThe software is licensed, not sold. Licensor retains all right, title, and interest in and to the software, including all intellectual property rights therein.\n4. Disclaimer of Warranties\nThe software is provided \u0026ldquo;as is\u0026rdquo; without warranty of any kind, either express or implied, including, but not limited to, the implied warranties of merchantability, fitness for a particular purpose, or non-infringement. Licensee assumes all risk as to the quality and performance of the software.\n5. Limitation of Liability\nIn no event shall Licensor be liable for any damages arising out of the use of or inability to use the software, even if Licensor has been advised of the possibility of such damages.\n6. Termination\nThis license is effective until terminated. Licensor may terminate this license at any time if Licensee fails to comply with the terms of this license. Upon termination, Licensee must destroy all copies of the software in their possession.\nBy using the software, you acknowledge that you have read this agreement, understand it, and agree to be bound by its terms and conditions.\nDominik Hurta\nsupport@hurtaweb.cz\nNewtonsoft.Json The MIT License (MIT)\nCopyright (c) 2007 James Newton-King\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u0026ldquo;Software\u0026rdquo;), to deal in the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \u0026ldquo;AS IS\u0026rdquo;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF ERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\nUnity.Mathematics com.unity.mathematics copyright © 2023 Unity Technologies ApS\nLicensed under the Unity Companion License for Unity-dependent projects (see https://unity3d.com/legal/licenses/unity_companion_license).\nUnless expressly provided otherwise, the Software under this license is made available strictly on an “AS IS” BASIS WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED. Please review the license for details on these and other terms and conditions.\n","date":"0001-01-01","id":22,"permalink":"/docs/dh-save-system/quick-start/licenses/","summary":"\u003cp\u003eThis project includes the following software components, each under its own license:\u003c/p\u003e\n\u003ch3 id=\"dh-save-system\"\u003e\u003cstrong\u003eDH Save System\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eLimited Use License Agreement\u003c/p\u003e\n\u003cp\u003eCopyright (c) 2024 Dominik Hurta\u003c/p\u003e","tags":[],"title":"Licenses"},{"content":"This project includes the following software components, each under its own license:\nDH Shaders Limited Use License Agreement\nCopyright (c) 2024 Dominik Hurta\nThis software is provided to you (\u0026ldquo;Licensee\u0026rdquo;) by Dominik Hurta (\u0026ldquo;Licensor\u0026rdquo;) under the following terms and conditions. By using this software, you agree to be bound by the terms of this license.\n1. Grant of License\nLicensor grants to Licensee a non-exclusive, non-transferable license to use the software solely for personal or internal business purposes. This license is granted only to individuals or entities that have purchased the software from Dominik Hurta or an authorized distributor.\n2. Restrictions\nLicensee may not:\na. Modify, adapt, translate, or create derivative works based upon the software;\nb. Decompile, reverse engineer, disassemble, or otherwise attempt to derive source code from the software;\nc. Redistribute, sell, lease, rent, or sublicense the software to any third party;\nd. Remove any proprietary notices or labels on the software.\n3. Ownership\nThe software is licensed, not sold. Licensor retains all right, title, and interest in and to the software, including all intellectual property rights therein.\n4. Disclaimer of Warranties\nThe software is provided \u0026ldquo;as is\u0026rdquo; without warranty of any kind, either express or implied, including, but not limited to, the implied warranties of merchantability, fitness for a particular purpose, or non-infringement. Licensee assumes all risk as to the quality and performance of the software.\n5. Limitation of Liability\nIn no event shall Licensor be liable for any damages arising out of the use of or inability to use the software, even if Licensor has been advised of the possibility of such damages.\n6. Termination\nThis license is effective until terminated. Licensor may terminate this license at any time if Licensee fails to comply with the terms of this license. Upon termination, Licensee must destroy all copies of the software in their possession.\nBy using the software, you acknowledge that you have read this agreement, understand it, and agree to be bound by its terms and conditions.\nDominik Hurta\nsupport@hurtaweb.cz\n","date":"0001-01-01","id":23,"permalink":"/docs/dh-shaders/licenses/","summary":"\u003cp\u003eThis project includes the following software components, each under its own license:\u003c/p\u003e\n\u003ch3 id=\"dh-shaders\"\u003e\u003cstrong\u003eDH Shaders\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eLimited Use License Agreement\u003c/p\u003e\n\u003cp\u003eCopyright (c) 2024 Dominik Hurta\u003c/p\u003e","tags":[],"title":"Licenses"},{"content":"This project includes the following software components, each under its own license:\nDH UI Navigation System Limited Use License Agreement\nCopyright (c) 2024 Dominik Hurta\nThis software is provided to you (\u0026ldquo;Licensee\u0026rdquo;) by Dominik Hurta (\u0026ldquo;Licensor\u0026rdquo;) under the following terms and conditions. By using this software, you agree to be bound by the terms of this license.\n1. Grant of License\nLicensor grants to Licensee a non-exclusive, non-transferable license to use the software solely for personal or internal business purposes. This license is granted only to individuals or entities that have purchased the software from Dominik Hurta or an authorized distributor.\n2. Restrictions\nLicensee may not:\na. Modify, adapt, translate, or create derivative works based upon the software;\nb. Decompile, reverse engineer, disassemble, or otherwise attempt to derive source code from the software;\nc. Redistribute, sell, lease, rent, or sublicense the software to any third party;\nd. Remove any proprietary notices or labels on the software.\n3. Ownership\nThe software is licensed, not sold. Licensor retains all right, title, and interest in and to the software, including all intellectual property rights therein.\n4. Disclaimer of Warranties\nThe software is provided \u0026ldquo;as is\u0026rdquo; without warranty of any kind, either express or implied, including, but not limited to, the implied warranties of merchantability, fitness for a particular purpose, or non-infringement. Licensee assumes all risk as to the quality and performance of the software.\n5. Limitation of Liability\nIn no event shall Licensor be liable for any damages arising out of the use of or inability to use the software, even if Licensor has been advised of the possibility of such damages.\n6. Termination\nThis license is effective until terminated. Licensor may terminate this license at any time if Licensee fails to comply with the terms of this license. Upon termination, Licensee must destroy all copies of the software in their possession.\nBy using the software, you acknowledge that you have read this agreement, understand it, and agree to be bound by its terms and conditions.\nDominik Hurta\nsupport@hurtaweb.cz\n","date":"0001-01-01","id":24,"permalink":"/docs/dh-ui-navigation-system/quick-start/licenses/","summary":"\u003cp\u003eThis project includes the following software components, each under its own license:\u003c/p\u003e\n\u003ch3 id=\"dh-ui-navigation-system\"\u003e\u003cstrong\u003eDH UI Navigation System\u003c/strong\u003e\u003c/h3\u003e\n\u003cp\u003eLimited Use License Agreement\u003c/p\u003e","tags":[],"title":"Licenses"},{"content":"Introduction Welcome to the Liquid Potion Shader documentation. This shader for Unity provides customizable liquid, glass, and bottle shaders, enabling you to create realistic potion effects with adjustable liquid levels, colors, and glass properties. This documentation will guide you through the initial setup and configuration to help you get the most out of the Liquid Potion Shader.\nQuick Start Basic Configuration Adjusting Liquid Levels Select the object with the Liquid Potion Shader applied.\nIn the Inspector, locate the Liquid Amount property.\nUse the slider or input field to adjust the amount of liquid in the container.\nLiquid Properties Base Color: Defines the main color of the liquid.\nTop Color: Specifies the color at the surface of the liquid.\nMid Color: Determines the transition color between the Top Color and Base Color.\nLiquid Amount: Adjusts the volume of liquid in the container.\nMid Amount: Controls the transition between the bottom and top colors.\nGlass Properties Fresnel Color: Sets the color of the glass.\nFresnel Power: Adjusts the transparency of the glass.\n","date":"0001-01-01","id":25,"permalink":"/docs/dh-shaders/liquid-potion/","summary":"\u003ch2 id=\"introduction\"\u003e\u003cstrong\u003eIntroduction\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003eWelcome to the \u003cstrong\u003eLiquid Potion\u003c/strong\u003e \u003cstrong\u003eShader\u003c/strong\u003e documentation. This shader for Unity provides customizable liquid, glass, and bottle shaders, enabling you to create realistic potion effects with adjustable liquid levels, colors, and glass properties. This documentation will guide you through the initial setup and configuration to help you get the most out of the Liquid Potion Shader.\u003c/p\u003e","tags":[],"title":"Liquid Potion"},{"content":"Save\u0026lt;T\u0026gt; Saves a value to global or slot data.\nParameters ID: Unique identifier for the data entry.\nvalue: Value to save.\nisGlobal: True for global data, false for slot-specific data.\nExample Usage\nSaveSystem.Save(\u0026#34;playerHealth\u0026#34;, 100, isGlobal: false);\rLoad\u0026lt;T\u0026gt; Loads a value of type T using the specified ID from either global or slot-specific data.\nParameters ID: The unique identifier for the data to load.\nisGlobal: True for global data, false for slot-specific data.\nExample Usage\nint playerHealth = SaveSystem.Load\u0026lt;int\u0026gt;(\u0026#34;playerHealth\u0026#34;, isGlobal: false);\rTryLoad\u0026lt;T\u0026gt; Attempts to load data of a specified type using the given ID from either global or slot-specific data.\nParameters returnData: Output parameter for the loaded data.\nID: The unique identifier for the data to load.\nisGlobal: True for global data, false for slot-specific data.\nExample Usage\nbool success = SaveSystem.TryLoad(out int playerHealth, \u0026#34;playerHealth\u0026#34;, isGlobal: false);\rLoadTransform Loads and applies transform data to a single target transform.\nParameters targetTransform: The target transform to apply data to.\nID: The unique identifier for the data.\nisGlobal: True for global data, false for slot-specific data.\nExample Usage\nSaveSystem.LoadTransform(player.transform, \u0026#34;playerPosition\u0026#34;, isGlobal: false);\rUpdate\u0026lt;T\u0026gt; Updates existing data with the specified ID in either global or slot-specific storage.\nParameters ID: The unique identifier for the data entry.\nvalue: The new value to store.\nisGlobal: True to update global data, false for slot-specific data.\nExample Usage\nSaveSystem.Update(\u0026#34;playerHealth\u0026#34;, 150, isGlobal: false);\rUpdateOrSave\u0026lt;T\u0026gt; Updates an existing entry with the specified ID or saves a new entry if it does not exist.\nParameters ID: The unique identifier for the data entry.\nvalue: The value to update or save.\nisGlobal: True to operate on global data, false for slot-specific data.\nExample Usage\nSaveSystem.UpdateOrSave(\u0026#34;playerScore\u0026#34;, 5000, isGlobal: false);\rRemove Removes a data entry with the specified ID from either global or slot-specific storage.\nParameters ID: The unique identifier for the data entry to be removed.\nisGlobal: True to remove from global data, false for slot-specific data.\nExample Usage\nSaveSystem.Remove(\u0026#34;playerHealth\u0026#34;, isGlobal: false);\rClearData Clears all data within a specified scope (global or slot-specific) without removing the slots themselves. Optionally saves the changes immediately.\nParameters isGlobal: Determines whether to clear global data or data specific to the current slot.\nsaveImmediately: If true, the changes are saved immediately after clearing the data.\nExample Usage:\nSaveSystem.ClearData(isGlobal: true, saveImmediately: true); Debug.Log(\u0026#34;Global data cleared and saved.\u0026#34;);\rCreateNewSaveSlot Creates a new save slot with the specified name and index, and saves it.\nParameters slotName: The name of the new save slot.\nindexSlot: The index of the new save slot.\nExample Usage:\nSaveSystem.CreateNewSaveSlot(\u0026#34;New Slot\u0026#34;, 1); Debug.Log(\u0026#34;New save slot created.\u0026#34;);\rLoadSaveSlot Loads the save slot with the specified name into memory, replacing any currently loaded data.\nParameters slotName: The name of the save slot to load. Example Usage:\ntry { SaveSystem.LoadSaveSlot(\u0026#34;Slot Name\u0026#34;); Debug.Log(\u0026#34;Save slot loaded.\u0026#34;); } catch(SaveSlotNotLoadedException ex) { Debug.LogError(\u0026#34;Error loading slot: \u0026#34; + ex.Message); }\rRemoveSaveSlot Removes a save slot with the specified name and index, deletes its associated save file, and updates global data accordingly.\nParameters slotName: The name of the save slot to remove.\nindexSlot: The index of the save slot to remove.\nExample Usage:\nbool removed = SaveSystem.RemoveSaveSlot(\u0026#34;Slot to Remove\u0026#34;, 0); Debug.Log(\u0026#34;Save slot removed: \u0026#34; + removed);\rSaveData Saves the current slot data to disk and updates the global save data.\nExample Usage:\ntry { SaveSystem.SaveData(); Debug.Log(\u0026#34;Data saved successfully.\u0026#34;); } catch(SaveSlotNotLoadedException ex) { Debug.LogError(\u0026#34;Error saving data: \u0026#34; + ex.Message); }\rLoadData Loads data from a \u0026lsquo;specified path and optionally applies provided JSON converters for custom deserialization.\nParameters jsonConverters: (Optional) A list of JsonConverter instances for custom serialization settings. Example Usage:\nList\u0026lt;JsonConverter\u0026gt; converters = new List\u0026lt;JsonConverter\u0026gt; { new MyCustomConverter() }; SaveSystem.LoadData(converters); Debug.Log(\u0026#34;Data loaded with custom converters.\u0026#34;);\rSaveGlobalData Saves global data, including information about all save slots, to disk.\nExample Usage\nSaveSystem.SaveGlobalData();\rContains Checks if the specified ID exists in either global or slot-specific data.\nParameters ID: The unique identifier to check.\nisGlobal: True to check in global data, false for slot-specific data.\nExample Usage\nbool exists = SaveSystem.Contains(\u0026#34;playerHealth\u0026#34;, isGlobal: false);\rDeserialize\u0026lt;T\u0026gt; Deserializes JSON data into an object of the specified type.\nParameters json: The encrypted JSON string to deserialize. Example Usage\nstring jsonData = \u0026#34;{ \\\u0026#34;playerHealth\\\u0026#34;: 100 }\u0026#34;; // Encrypted JSON string int playerHealth = SaveSystem.Deserialize\u0026lt;int\u0026gt;(jsonData);\rSerialize Serializes an object into a JSON string and encrypts it.\nParameters value: The object to serialize. Example Usage PlayerData playerData = new PlayerData { Health = 100, Score = 5000 }; string encryptedJsonData = SaveSystem.Serialize(playerData);\r","date":"0001-01-01","id":26,"permalink":"/docs/dh-save-system/save-system-class/methods/","summary":"\u003ch2 id=\"savet\"\u003e\u003ccode\u003eSave\u0026lt;T\u0026gt;\u003c/code\u003e\u003c/h2\u003e\n\u003cp\u003eSaves a value to global or slot data.\u003c/p\u003e\n\u003ch4 id=\"parameters\"\u003e\u003cstrong\u003eParameters\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003eID\u003c/code\u003e: Unique identifier for the data entry.\u003c/p\u003e\n\u003c/li\u003e\n\u003cli\u003e\n\u003cp\u003e\u003ccode\u003evalue\u003c/code\u003e: Value to save.\u003c/p\u003e","tags":[],"title":"Methods"},{"content":"TryGetRight Tries to get the Navigation component of the UI element to the right.\nParameters rightNavigation: The Navigation component found on the right, if any. Returns bool: True if a Navigation component was found on the right, false otherwise. Example Usage\nNavigation rightNav; bool found = currentNavigaton.TryGetRight(out rightNav);\rTryGetLeft Tries to get the Navigation component of the UI element to the left.\nParameters leftNavigation: The Navigation component found on the left, if any. Returns bool: True if a Navigation component was found on the left, false otherwise. Example Usage\nNavigation leftNav; bool found = currentNavigaton.TryGetLeft(out leftNav);\rTryGetUp Tries to get the Navigation component of the UI element above.\nParameters upNavigation: The Navigation component found above, if any. Returns bool: True if a Navigation component was found above, false otherwise. Example Usage\nNavigation upNav; bool found = currentNavigaton.TryGetUp(out upNav);\rTryGetDown Tries to get the Navigation component of the UI element below.\nParameters downNavigation: The Navigation component found below, if any. Returns bool: True if a Navigation component was found below, false otherwise. Example Usage\nNavigation downNav; bool found = currentNavigaton.TryGetDown(out downNav);\rMoveRight Moves the selection to the right.\nExample Usage\nNavigation.MoveRight();\rMoveLeft Moves the selection to the left.\nExample Usage\nNavigation.MoveLeft();\rMoveUp Moves the selection upwards.\nExample Usage\nNavigation.MoveUp();\rMoveDown Moves the selection downwards.\nExample Usage\nNavigation.MoveDown();\rMove Moves the selection in the specified direction.\nParameters moveDirection: Direction to move the selection. Example Usage\nNavigation.Move(MoveDirection.Right);\rSetSelected Sets the currently selected GameObject in the EventSystem to the specified navigation.\nParameters navigation: Navigation object to set as selected. Example Usage\nNavigation.SetSelected(navigationComponent);\rGetSelected Retrieves the Navigation component of the currently selected GameObject in the EventSystem. Throws an exception if the selected GameObject doesn\u0026rsquo;t have a Navigation component.\nReturns Navigation: Navigation component of the currently selected GameObject. Example Usage\ntry { Navigation currentNav = Navigation.GetSelected(); } catch (Exception ex) { Debug.LogError(\u0026#34;Error: \u0026#34; + ex.Message); }\r","date":"0001-01-01","id":27,"permalink":"/docs/dh-ui-navigation-system/methods/","summary":"\u003ch2 id=\"trygetright\"\u003e\u003ccode\u003eTryGetRight\u003c/code\u003e\u003c/h2\u003e\n\u003cp\u003eTries to get the Navigation component of the UI element to the right.\u003c/p\u003e\n\u003ch4 id=\"parameters\"\u003e\u003cstrong\u003eParameters\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003erightNavigation\u003c/code\u003e: The Navigation component found on the right, if any.\u003c/li\u003e\n\u003c/ul\u003e\n\u003ch4 id=\"returns\"\u003e\u003cstrong\u003eReturns\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ccode\u003ebool\u003c/code\u003e: True if a Navigation component was found on the right, false otherwise.\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eExample Usage\u003c/strong\u003e\u003c/p\u003e","tags":[],"title":"Methods"},{"content":"Introduction Welcome to the MindPop documentation. MindPop is a simple tool designed for Unity developers to provide timely motivational popups while you work on your projects. This documentation will guide you through the configuration, and customization of MindPop to help you stay motivated and productive during your development process.\nBasic Configuration Enabling and Disabling MindPop Once MindPop is installed, you will see a MindPop button in the top bar of the Unity Editor.\nClick this button to Turn On or Turn Off the MindPop tool. This gives you quick control over the motivational popups without navigating deep into settings.\nQuick Guide: Enabling MindPop\nYour browser does not support the video tag.\rQuick Guide: Disabling MindPop\nYour browser does not support the video tag.\rMindPop Settings The MindPop section in the Project Settings allows you to customize how the tool functions. Here’s what you can configure:\nLanguage Selection: Choose your preferred language for the motivational popups from a list of 10 available languages.\nMessage Interval: Set the frequency of motivational popups with preset options: 5, 10, 15, 20, 30, 45, or 60 minutes.\nTime to Next Message: Displays the remaining time until the next motivational popup, helping you keep track of when the next message will appear.\nYour browser does not support the video tag.\rFAQ How do I stop popups temporarily? Use the MindPop button in the top bar (or in Project Settings) to turn off the tool when needed.\nWhat languages are supported? MindPop comes with 10 languages, including Czech, English, Spanish, Chinese, French, German, Russian, Portuguese, Japanese and Arabic.\nCan I customize the messages? Not yet! It will be in the update.\n","date":"0001-01-01","id":28,"permalink":"/docs/other/mindpop/","summary":"\u003ch2 id=\"introduction\"\u003e\u003cstrong\u003eIntroduction\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003eWelcome to the MindPop documentation. MindPop is a simple tool designed for Unity developers to provide timely motivational popups while you work on your projects. This documentation will guide you through the configuration, and customization of MindPop to help you stay motivated and productive during your development process.\u003c/p\u003e","tags":[],"title":"MindPop"},{"content":"The core of the DH UI Navigation System, this component is attached to UI elements to manage navigation.\nProperties Interactable: When set to false, the navigation component is non-interactive.\nNavigation Mode: Defines the navigation behavior:\nNone: No navigation.\nHorizontal: Navigate elements left and right.\nVertical: Navigate elements up and down.\nAutomatic: Auto-detects the best navigation paths.\nExplicit: Manually set navigation paths.\nWrapAround: Available in Horizontal, Vertical, and Automatic modes. Enables wrapping navigation to create a grid-like navigation structure.\nIgnored Sides: Specifies sides to ignore during navigation, allowing manual configuration of these sides.\nIt can be found in the Hierarchy menu under UI\u0026gt;Navigation :\n","date":"0001-01-01","id":29,"permalink":"/docs/dh-ui-navigation-system/navigation-component/","summary":"\u003cp\u003eThe core of the \u003cstrong\u003eDH UI Navigation System\u003c/strong\u003e, this component is attached to UI elements to manage navigation.\u003c/p\u003e\n\u003ch4 id=\"properties\"\u003e\u003cstrong\u003eProperties\u003c/strong\u003e\u003c/h4\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003cp\u003e\u003cstrong\u003eInteractable\u003c/strong\u003e: When set to \u003ccode\u003efalse\u003c/code\u003e, the navigation component is non-interactive.\u003c/p\u003e","tags":[],"title":"Navigation Component"},{"content":"","date":"0001-01-01","id":30,"permalink":"/docs/other/","summary":"","tags":[],"title":"Other"},{"content":"GetCurrentSaveSlot Returns the currently loaded save slot.\nExample Usage:\nvar currentSlot = SaveSystem.GetCurrentSaveSlot; Debug.Log(\u0026#34;Current Save Slot: \u0026#34; + currentSlot.SlotName);\rGetSaveDataSlots Retrieves all created save slots.\nExample Usage:\nvar allSlots = SaveSystem.GetSaveDataSlots; foreach(var slot in allSlots) { Debug.Log(\u0026#34;Slot Name: \u0026#34; + slot.SlotName); }\rGetGlobalData Returns a dictionary containing all global data.\nExample Usage:\nvar globalData = SaveSystem.GetGlobalData; foreach(var entry in globalData) { Debug.Log($\u0026#34;Key: {entry.Key}, Value: {entry.Value}\u0026#34;); }\rGetSlotData Returns a dictionary with the current slot\u0026rsquo;s data.\nExample Usage:\nvar slotData = SaveSystem.GetSlotData; foreach(var data in slotData) { Debug.Log($\u0026#34;Key: {data.Key}, Value: {data.Value}\u0026#34;); }\rAreThereUnsavedSlotData Indicates whether there is unsaved data for the current slot.\nExample Usage:\nbool unsavedData = SaveSystem.AreThereUnsavedSlotData; Debug.Log(\u0026#34;Unsaved Slot Data: \u0026#34; + unsavedData);\rAreThereUnsavedGlobalData Indicates whether there is unsaved global data.\nExample Usage:\nbool unsavedGlobalData = SaveSystem.AreThereUnsavedGlobalData; Debug.Log(\u0026#34;Unsaved Global Data: \u0026#34; + unsavedGlobalData);\rIsSlotLoaded Checks if a save slot is currently loaded.\nExample Usage:\nbool isLoaded = SaveSystem.IsSlotLoaded; Debug.Log(\u0026#34;Is Slot Loaded: \u0026#34; + isLoaded);\r","date":"0001-01-01","id":31,"permalink":"/docs/dh-save-system/save-system-class/properties/","summary":"\u003ch2 id=\"getcurrentsaveslot\"\u003e\u003ccode\u003eGetCurrentSaveSlot\u003c/code\u003e\u003c/h2\u003e\n\u003cp\u003eReturns the currently loaded save slot.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eExample Usage:\u003c/strong\u003e\u003c/p\u003e\n\r\n\r\n\r\n\u003cdiv class=\"expressive-code\"\u003e\r\n  \u003cfigure class=\"frame not-content\"\u003e\r\n  \u003cfigcaption class=\"header\"\u003e\r\n    \u003cspan class=\"title\"\u003e\u003c/span\u003e\r\n  \u003c/figcaption\u003e\r\n  \u003cdiv class=\"highlight\"\u003e\u003cpre tabindex=\"0\" class=\"chroma\"\u003e\u003ccode class=\"language-csharp\" data-lang=\"csharp\"\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"kt\"\u003evar\u003c/span\u003e \u003cspan class=\"n\"\u003ecurrentSlot\u003c/span\u003e \u003cspan class=\"p\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eSaveSystem\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eGetCurrentSaveSlot\u003c/span\u003e\u003cspan class=\"p\"\u003e;\u003c/span\u003e\n\u003c/span\u003e\u003c/span\u003e\u003cspan class=\"line\"\u003e\u003cspan class=\"cl\"\u003e\u003cspan class=\"n\"\u003eDebug\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eLog\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s\"\u003e\u0026#34;Current Save Slot: \u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003ecurrentSlot\u003c/span\u003e\u003cspan class=\"p\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eSlotName\u003c/span\u003e\u003cspan class=\"p\"\u003e);\u003c/span\u003e\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\r\n  \u003c/figure\u003e\r\n\u003c/div\u003e\r\n\u003ch2 id=\"getsavedataslots\"\u003e\u003ccode\u003eGetSaveDataSlots\u003c/code\u003e\u003c/h2\u003e\n\u003cp\u003eRetrieves all created save slots.\u003c/p\u003e","tags":[],"title":"Properties"},{"content":"Introduction Welcome to the Stencil Shader documentation. This guide will help you understand how to integrate and utilize the Stencil Shader within Unity\u0026rsquo;s Universal Render Pipeline (URP) to create stunning visual effects such as impossible geometry and portal effects.\nQuick Start Basic Configuration Applying the Shader Select the mesh you want to apply the Stencil Shader to.\nIn the Inspector, locate the material section.\nApply the Stencil Shader to the material of the mesh.\nSetting Layer Visibility Open the URP renderer settings.\nConfigure the visible layers that the Stencil Shader will interact with.\nEnsure only the desired layers are set to be visible through the mesh.\nAssigning Unique IDs In the Inspector, find the Stencil Shader properties.\nAssign a unique ID to each material using the shader.\nUse these IDs for precise control over the visual effects.\n","date":"0001-01-01","id":32,"permalink":"/docs/dh-shaders/stencil-urp/","summary":"\u003ch2 id=\"introduction\"\u003e\u003cstrong\u003eIntroduction\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003eWelcome to the \u003cstrong\u003eStencil Shader\u003c/strong\u003e documentation. This guide will help you understand how to integrate and utilize the Stencil Shader within Unity\u0026rsquo;s Universal Render Pipeline (URP) to create stunning visual effects such as impossible geometry and portal effects.\u003c/p\u003e","tags":[],"title":"Stencil - URP"},{"content":"","date":"0001-01-01","id":33,"permalink":"/tags/","summary":"","tags":[],"title":"Tags"},{"content":"Introduction Welcome to the UI BLUR - URP Shader documentation. This guide will help you understand how to integrate and utilize the UI Blur shader within Unity\u0026rsquo;s Universal Render Pipeline (URP) to create stunning blur effects on UI elements and 3D objects.\nOverview The UI BLUR - URP shader is designed to provide blur effects for both UI elements and 3D/2D objects within your Unity project. It includes:\nui_blur_mat: A material for blurring UI elements and 3D/2D objects.\nui_blur_mat_transparent: A material specifically for blurring 3D/2D objects.\nUI Blur Controller script: A utility to control the blur amount dynamically.\nSetting Up the Shader (For ui_blur_mat) Enabling Opaque Texture For the ui_blur_mat material to work correctly, you need to enable the Opaque Texture property in the Render Pipeline Asset.\nOpen your URP settings.\nSet Opaque Texture to TRUE.\nConfiguring Opaque Downsampling It is recommended to configure Opaque Downsampling to 4x Box for optimal performance.\nIn URP settings, find the Opaque Downsampling option.\nSet it to 4x Box.\nWorking with UI Blur Materials ui_blur_mat This material works for both UI elements and gameobjects in the scene.\nEnsure the Opaque Texture property is enabled.\nApply the ui_blur_mat to your UI element or gameobject.\nMake sure you turn off the Is Transparent option in UI Blur Controller.\nui_blur_mat_transparent This material works specifically for gameobjects in the scene.\nCreate a second camera in the scene derived from the MainCamera.\nTurn off the UI option in the Culling Mask for the second camera.\nApply the ui_blur_mat_transparent to your gameobject.\nMake sure you turn on the Is Transparent option in UI Blur Controller and Blur Camera property is set.\nUsing the UI Blur Controller Script The UI Blur Controller script allows you to dynamically control the blur amount.\nAttach the UI Blur Controller script to the UI element or gameobject.\nUse the BlurAmount attribute to adjust the blur amount as needed.\nShapes and Customization The package includes two shapes: a circle and a square. You can also use your own custom shapes.\nImport your custom shape into the project.\nApply the ui_blur_mat or ui_blur_mat_transparent material to your custom shape.\nNew Feature: Drag-and-Drop UI Element Blurring The new feature allows you to select specific UI elements that will be affected by blur for the ui_blur_mat material using a drag-and-drop interface. Here’s how to use it:\nIn the UI Blur Controller inspector, you\u0026rsquo;ll see a Foldout labeled \u0026ldquo;UI Elements\u0026rdquo;.\nDrag and drop UI elements from the hierarchy into this list.\nNext to each added element, there is an option to Include Children.\nIf checked, all child objects will also be blurred.\nIf unchecked, only the parent object will be affected by the blur.\nA cross (X) button next to each UI element allows you to remove it from the list.\nYour browser does not support the video tag.\rFAQ Can I use this shader with the Built-in Render Pipeline? No, this shader is designed specifically for the Universal Render Pipeline (URP).\nHow do I control the blur amount dynamically? Use the UI Blur Controller script attached to the UI element or gameobject.\n","date":"0001-01-01","id":34,"permalink":"/docs/dh-shaders/ui-blur-urp/","summary":"\u003ch2 id=\"introduction\"\u003e\u003cstrong\u003eIntroduction\u003c/strong\u003e\u003c/h2\u003e\n\u003cp\u003eWelcome to the \u003cstrong\u003eUI BLUR - URP Shader\u003c/strong\u003e documentation. This guide will help you understand how to integrate and utilize the UI Blur shader within Unity\u0026rsquo;s Universal Render Pipeline (URP) to create stunning blur effects on UI elements and 3D objects.\u003c/p\u003e","tags":[],"title":"UI Blur - URP"},{"content":"The Visualize button provides a graphical representation of navigation links between elements within the Unity Editor, enhancing the default Unity visualization.\nUsage: Use the Visualize button in the Inspector window to display navigation paths. ","date":"0001-01-01","id":35,"permalink":"/docs/dh-ui-navigation-system/visualization-tool/","summary":"\u003cp\u003eThe \u003ccode\u003eVisualize\u003c/code\u003e button provides a graphical representation of navigation links between elements within the Unity Editor, enhancing the default Unity visualization.\u003c/p\u003e","tags":[],"title":"Visualization Tool"}]